import streamlit as st
import os
from PIL import Image
from dotenv import load_dotenv
import google.generativeai as genai

# Load environment variables from a .env file
load_dotenv()

# Configure the generative AI API using the API key from environment variables
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to get a response from Gemini
def get_gemini_repsonse(prompt, image):
    """
    Generate a response using the Gemini model.
    
    Args:
        prompt (str): The input prompt describing the task.
        image (list): A formatted list containing image data for the model.
    
    Returns:
        str: The response text generated by the model.
    """
    model = genai.GenerativeModel('gemini-1.5-flash')  # Select the Gemini model variant
    response = model.generate_content([image[0], prompt])
    return response.text

# Function to process the uploaded image into a format required by Gemini
def input_image_setup(uploaded_file):
    """
    Format the uploaded image for use with Gemini.
    
    Args:
        uploaded_file: The uploaded image file.
    
    Returns:
        list: A list containing the mime type and image data.
    
    Raises:
        FileNotFoundError: If no file is uploaded.
    """
    if uploaded_file is not None:
        # Convert the uploaded file to bytes
        bytes_data = uploaded_file.getvalue()

        # Format the image data with MIME type for the model
        image_parts = [
            {
                "mime_type": uploaded_file.type,  # Extract the MIME type (e.g., image/png)
                "data": bytes_data
            }
        ]
        return image_parts
    else:
        raise FileNotFoundError("No file uploaded")

# Set the Streamlit page configuration
st.set_page_config(page_title="Health App")

# Add a header to the Streamlit app
st.header("Calorie Compass")

# File uploader to upload an image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

image = ""  # Initialize image variable
if uploaded_file is not None:
    # Display the uploaded image in the app
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_container_width=False, width = 600)

# Button to trigger calorie analysis
submit = st.button("Tell me the total calories")

# New input prompt for the task
input_prompt = """
You are a nutrition expert tasked with analyzing food items in the uploaded image. 
Please identify each food item, estimate the calorie count for each, and summarize as follows:

1. Item 1 - Number of calories
2. Item 2 - Number of calories
---
---

Next, provide the total calorie count for all items combined. 
Assess whether the food is healthy or unhealthy. If unhealthy, suggest healthier alternatives.
"""

# If the submit button is clicked
if submit:
    # Prepare the uploaded image for the model
    image_data = input_image_setup(uploaded_file)
    
    # Get the AI response using the new prompt and uploaded image
    response = get_gemini_repsonse(input_prompt, image_data)
    
    # Display the response in the app
    st.subheader("The Response is")
    st.write(response)


